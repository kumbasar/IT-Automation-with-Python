#!/usr/bin/env python3

import json
import locale
import sys
import emails
import reports
import os


def load_data(filename):
    """Loads the contents of filename as a JSON file."""
    with open(filename) as json_file:
        data = json.load(json_file)
    return data


def format_car(car):
    """Given a car dictionary, returns a nicely formatted name."""
    return "{} {} ({})".format(
        car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
    """Analyzes the data, looking for maximums.

    Returns a list of lines that summarize the information.
    """
    max_revenue = {"revenue": 0}
    max_sales = {"total_sales": 0}
    popular = {}

    for item in data:
        # Calculate the revenue generated by this model (price * total_sales)
        # We need to convert the price from "$1234.56" to 1234.56
        item_price = locale.atof(item["price"].strip("$"))
        item_revenue = item["total_sales"] * item_price
        if item_revenue > max_revenue["revenue"]:
            item["revenue"] = item_revenue
            max_revenue = item
        if item["total_sales"] > max_sales["total_sales"]:
            # Set max sales item
            max_sales = item

        # Calulate car year
        if item["car"]["car_year"] not in popular:
            popular[item["car"]["car_year"]] = item["total_sales"]
        else:
            popular[item["car"]["car_year"]] += item["total_sales"]

    # Get most popular year
    most_year = (max(popular, key=popular.get))

    summary = [
        "The {} generated the most revenue: ${}".format(format_car(max_revenue["car"]), max_revenue["revenue"]),
        "The {} had the most sales: {}".format(format_car(max_sales["car"]), max_sales["total_sales"]),
        "The most popular year was {} with {} sales.".format(most_year, popular[most_year])
    ]

    return summary


def take_sales(item):
    return item["total_sales"]


def cars_dict_to_table(car_data):
    """Turns the data in car_data into a list of lists."""
    table_data = [["ID", "Car", "Price", "Total Sales"]]

    """Sort list of cars in the PDF by total sales."""
    sorted_car_data = sorted(car_data, key=take_sales, reverse=True)

    for item in sorted_car_data:
        table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
    return table_data


def main(argv):
    """Process the JSON data and generate a full report out of it."""
    data = load_data("car_sales.json")
    summary = process_data(data)
    print(summary)

    table_data = cars_dict_to_table(data)

    reports.generate("/tmp/cars.pdf", "Sales summary for last month", "<br/>".join(summary), table_data)

    sender = "automation@example.com"
    receiver = "{}@example.com".format(os.environ.get('USER'))
    subject = "Sales summary for last month"
    body = "\n".join(summary)

    message = emails.generate(sender, receiver, subject, body, "/tmp/cars.pdf")
    emails.send(message)


if __name__ == "__main__":
    main(sys.argv)